/*
 Write an OpenMP parallel program that generates the histogram of an array of floating-point numbers. Your program should do the followings:
 (1) Read in an integer n from the user;
 (2) Generate an array of n floating point numbers, whose values are randomly generated
 between 0.0 and 10.0;
 (3) Print how many numbers are in the range of [0, 1), [1, 2), [2, 3), ..., [9, 10], respectively.
 (4) Print the running time of your solution and the serial solution.
 */

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void serial_histogram(float *array, int n, int *bins, int num_bins)
{
    int i;
    /* Initialize the bins as zero */
    for (i = 0; i < num_bins; i++) {
        bins[i] = 0;
    }
    /* Counting */
    for (i = 0; i < n; i++) {
        bins[(int)array[i] % (num_bins+1)]++;
    }
}
    
void parallel_histogram(float *array, int n, int *bins, int num_bins)
{
    int i;
    float a = 10.0;
    #pragma omp task shared(array)
    {
        for(i=0; i<n; ++i)
            array[i] = ((float)rand()/(float)(RAND_MAX)) * a;
    
    }
    #pragma omp task shared(bins)
    {
        for (i = 0; i < num_bins; i++)
            bins[i] = 0;
    }
}

void generate_random_numbers(float *array, int n)
{
    int i;
    float a = 10.0;
    for(i=0; i<n; ++i)
        array[i] = ((float)rand()/(float)(RAND_MAX)) * a;
}

int read_integers(){
    int q;
    printf("Please enter an integer, other than 0:\n");
    scanf("%d", &q);
    return q;
}

void serial_run(){
    printf("To see signficant speed up parallel V.S serial-----\n");
    printf("Try numbers over 10000\n");
    int n = read_integers();
    int num_bins = 10;
    float *array;
    int *bins;
    array = (float *)malloc(sizeof(float) * n);
    bins = (int*)malloc(sizeof(int) * num_bins);
    double start = omp_get_wtime();
    generate_random_numbers(array, n);
    serial_histogram(array, n, bins, num_bins);
    double end = omp_get_wtime();
    printf("Serial results\n");
    int i;
    for (i = 0; i < num_bins; i++) {
        printf("bins[%d]: %d\n", i, bins[i]);
    }
    printf("Running time, serial: %f seconds\n", end - start);
    free(array);
    free(bins);
}


void parallel_run(){
    int n = read_integers();
    int num_bins = 10;
    float *array;
    int *bins;
    array = (float *)malloc(sizeof(float) * n);
    bins = (int*)malloc(sizeof(int) * num_bins);
    
    int thread_count = omp_get_num_threads();
    double start = omp_get_wtime();
    int j;
    #pragma omp parallel num_threads(thread_count)
    {
        #pragma omp single
        {
            parallel_histogram(array, n, bins, num_bins);
        }
        #pragma omp for schedule(auto)
        for(j=0; j < n; j++){
             bins[(int)array[j] % (num_bins+1)]++;
        }
    }
    double end = omp_get_wtime();
    printf("Parallel results\n");
    int i;
    for (i = 0; i < num_bins; i++) {
        printf("bins[%d]: %d\n", i, bins[i]);
    }
    printf("Running time, parallel: %f seconds\n", end - start);
    free(array);
    free(bins);
}



int main(int argc, char* argv[])
{
    serial_run();
    parallel_run();
    return 0;
}
